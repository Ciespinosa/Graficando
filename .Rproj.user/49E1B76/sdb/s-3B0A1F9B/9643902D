{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Graficando con R. El inicio\"\nauthor: \"Carlos Iván Espinosa\"\ndate: \"Octubre de 2016\"\noutput:\n  pdf_document:\n    toc: yes\n  html_document:\n    fig_caption: yes\n    highlight: haddock\n    number_sections: yes\n    theme: cosmo\n    toc: yes\n---\n\n#Introducción\n\n----------\n\nLa representación gráfica de los datos es una actividad bastante común, en todas partes vemos gráficos representando información de todo tipo, los vemos en textos científicos, divulgativos o en informes de organismos públicos o privados.  Sin embargo, estos no siempre cumplen con los estándares de una buena gráfica. \n\nEl hacer una buena gráfica no es cuestión sencilla y requiere un gran trabajo de abstracción.  En esta lección intentaremos dar algunas pautas para poder desarrollar gráficas claras y esperamos que bonitas. Claro como siempre trabajaremos con R.\n\nPero antes de iniciar con R, es necesario aclaremos algunas cosas importantes. Intentaremos definir algunos principios básicos e importantes que deben ser tomados en cuenta para realizar una buena gráfica, pasaremos luego a entender la anatomía de una gráfica. Con estos insumos si pasaremos a conocer lo que nos ofrece R para hacer gráficas.\n\n##La visualización de datos\n\nNuestros cerebros están mucho más adecuados a captar imágenes más que números o letras, así que las gráficas es un medio visual para presentar información. De esta forma debemos pensar que el fin último de un gráfico es resumir información de tal forma que muestre tendencias y que permita comparaciones.\n\nExisten muchos principios para realizar una buena gráfica, intentaremos resumir algunos de ellos.\n\n- Captar la atención del lector. Este posiblemente es uno de los retos más grandes cuando estamos haciendo una gráfica, queremos que esta llame la atención y el lector se interese por la misma.\n\n- El gráfico debe presentar la información de la forma más sencilla, clara y precisa. Por lo tanto debemos asegurarnos que no tenemos información de más, si existe algo que borrando no le resta al entendimiento del gráfico bórrelo. \n\n- No inducir al error. Esta es una regla que muchos autores coinciden, los gráficos tienen el fin de presentar información, por tanto deben mostrar lo que esa información dice. \n\n- Los gráficos deben permitir al lector la comparación de datos, mostrar tendencias o diferencias entre las variables.\n\nMuchas otras reglas han sido discutidas mucho más de lo que uno realmente piensa, pero creo que lo más importante es entender para que quiero hacer un gráfico y asegurarme que este esté dando el mensaje que quiero que dé.\n\n#El sistema base de graficas\n\n-------------\n\nUna de las mayores fortalezas de R es la versatilidad para generar gráficos de alta calidad, existen muchos paquetes que permiten hacer gráficos de diferentes características como `ggplot` o `lattice`, sin embargo, ahora nos centraremos en el sistema base.\n\nAntes de empezar, para que se hagan una idea de algunas de las cosas que podemos hacer con R, permitamos a R que nos dé una muestra de los gráficos que se pueden hacer. \n\n```{r, eval=FALSE}\ndemo(graphics) # Ejecútela usted\n```\nSorprendid@, bueno eso no es nada hay muchas cosas que se pueden hacer con gráficos en R.\n\n##El lienzo donde graficar\n\nCuando estamos realizado gráficos en R, al contrario de lo que hemos visto hasta el momento, R envía el resultado de nuestros códigos a un dispositivo gráfico (una ventana) y no a un objeto. En el caso de RStudio es una ventana propia. Esta ventana es como el lienzo donde dibujaremos el gráfico.\n\nCuando yo ejecuto un gráfico, por ejemplo con la función `plot`, la _ventana_ (dispositivo gráfico) se abre automáticamente, para cerrar esta ventana puedo utilizar el comando `dev.off()`.  \n\nLa ventana tiene por defecto algunas características que pueden ser modificadas con la función `par`. Veamos la ventana que sale por defecto.\n\n```{r, fig.cap=\"Lienzo con características por defecto\", fig.align='center', fig.height=3, fig.width=4}\npar(bg=\"grey98\")\nplot(1:100, type=\"n\", axes=F, xlab = \"\", ylab=\"\", bg=\"white\")\nrect(-10, -10, 120, 120, col=\"white\")\nbox(lty = 3)\nmtext(c(\"side = 1\", \"side = 2\", \"side = 3\", \"side = 4\"),\nside = c(1, 2, 3, 4), col = \"grey\", line = 1, cex = 1.5)\n\n#dev.off()\n```\n<p><br></p>\n\nHe modificado una característica, el fondo del lienzo, lo normal es que el lienzo sea de color blanco y yo le he dicho que sea de color *grey98*. Luego volveremos a este punto.\n\nComo se ve en el gráfico inicialmente podemos ver dos partes distintas, la región del plot (el cuadrado en blanco), es la zona donde se dibujaran los datos. El área en gris son los márgenes de cada uno de los lados (side).  Cada lado siempre mantendrá ese orden, el lado uno es el inferior, el dos el izquierdo, el tres el superior y el cuatro el derecho.  Todos las características de este lienzo pueden ser controladas desde la función `par`. Por ejemplo, los márgenes pueden ser modificados utilizando la función `mar` dentro de `par`.  Modifiquemos los márgenes.\n\n```{r, fig.cap=\"Reduciendo los márgenes del lienzo\", fig.align='center', fig.height=3, fig.width=4}\npar(bg=\"grey98\", mar=c(3,3,3,3))\nplot(1:100, type=\"n\", axes=F, xlab = \"\", ylab=\"\", bg=\"white\")\nrect(-10, -10, 120, 120, col=\"white\")\nbox(lty = 3)\nmtext(c(\"side = 1\", \"side = 2\", \"side = 3\", \"side = 4\"),\nside = c(1, 2, 3, 4), col = \"grey\", line = 1, cex = 1.5)\n```\n<p><br></p>\n\nPodemos comparar con la anterior figura, ahora vemos que los márgenes se han hecho más pequeños. la función `mar` nos permite modificar en orden los lados 1,2,3,4.  Si usted necesita modificar con un valor diferente cada lado puede hacerlo.\n\nPuede ver todo lo que puede modificar en el lienzo usando la función `par`, ejecute en la consola __?par__ y revise las funciones.\n\nAhora otra de las cosas que puede ser importante es poder poner en un mismo lienzo más de un gráfico.  ¿Cómo puedo hacer esto?\n\n###Dividiendo el lienzo\n\nLa función `mfcol` me permite generar un lienzo con varias partes iguales, puedo decir cuántas filas y cuantas columnas.  Si quiero dos gráficos uno debajo de otro lo que debo hacer es `mfcol=c(2,1)` se especifica primero las filas y luego las columnas.  Si quiero en cambio un grafico a un lado de otro entonces debo poner `mfcol=c(1,2)`.\n\n```{r, fig.cap=\"Lienzo con dos gráficos de igual tamaño\", fig.align='center', fig.height=3, fig.width=6}\npar(bg=\"grey98\", mar=c(3,3,3,3), mfcol=c(1,2))\n#Primer gráfico\nplot(1:100, type=\"n\", axes=F, xlab = \"\", ylab=\"\", bg=\"white\")\nrect(-10, -10, 120, 120, col=\"white\")\nbox(lty = 3)\nmtext(c(\"side = 1\", \"side = 2\", \"side = 3\", \"side = 4\"),\nside = c(1, 2, 3, 4), col = \"grey\", line = 1, cex = 1.5)\n#Segundo gráfico\nplot(1:100, type=\"n\", axes=F, xlab = \"\", ylab=\"\", bg=\"white\")\nrect(-10, -10, 120, 120, col=\"white\")\nbox(lty = 3)\nmtext(c(\"side = 1\", \"side = 2\", \"side = 3\", \"side = 4\"),\nside = c(1, 2, 3, 4), col = \"grey\", line = 1, cex = 1.5)\n```\n<p><br></p>\n\nLa función `mfcol` es muy usada pero uno de los problemas que tiene es que todas las particiones tendrán el mismo tamaño, muchas veces nos interesa que un gráfico sea más grande que otro. Usaremos la función `layout` que nos permite partir el lienzo como queramos. El argumento principal de esta función es una matriz con números enteros que indican el número de partes que queremos obtener.\n\n```{r, fig.cap=\"Lienzo con dos gráficos de tamaño variable\",  fig.align='center', fig.height=3, fig.width=6}\n\nlayout(matrix(c(1,2,3,3), 2, 2))\npar(mar=c(1,1,1,1), bg=\"grey98\")\n\n#Primer gráfico\nplot(1:100, type=\"n\", axes=F, xlab = \"\", ylab=\"\", bg=\"white\")\nrect(-10, -10, 120, 120, col=\"white\")\nbox(lty = 3)\n#Segundo gráfico\nplot(1:100, type=\"n\", axes=F, xlab = \"\", ylab=\"\", bg=\"white\")\nrect(-10, -10, 120, 120, col=\"white\")\nbox(lty = 3)\n#tercer gráfico\nplot(1:100, type=\"n\", axes=F, xlab = \"\", ylab=\"\", bg=\"white\")\nrect(-10, -10, 120, 120, col=\"white\")\nbox(lty = 3)\n\n```\n\n<p><br></p>\n\nSi recordamos en lecciones anteriores hemos visto la función matrix, en esta la primera parte es el vector con los números que se escribirán dentro de la matriz (en este caso _c(1,2,3,3)_) y la segunda parte indica las filas y columnas (en este caso 2 filas y 2 columnas). Si quisiésemos que la gráfica grande este en el lado izquierdo el número 1 debería repetirse (_c(1,1,2,3)_). Inténtalo ahora tú.\n\nPero qué pasa si queremos por ejemplo hacer los gráficos de diferente tamaño.  Podemos utilizar la misma función pero agregamos los argumentos _widths_ y  _heights_, estos argumentos generan cambios relativos entre las partes, si pongo por ejemplo en widths=c(1,3) los anchos de las gráficas será la segunda columna 3 veces la primera, de forma parecida con heights condicionará los altos de las filas.\n\n```{r, fig.cap=\"Lienzo con dos gráficos de tamaño variable 2\", fig.align='center', fig.height=3.5, fig.width=6}\nlayout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE), \n       widths = c(2,3), heights = c(1.5,3))\npar(mar=c(1,1,1,1), oma=c(3,3,1,1), bg=\"grey98\")\n\n#Primer gráfico\nplot(1:100, type=\"n\", axes=F, xlab = \"\", ylab=\"\", bg=\"white\")\nrect(-10, -10, 120, 120, col=\"white\")\nbox(lty = 3)\n#Segundo gráfico\nplot(1:100, type=\"n\", axes=F, xlab = \"\", ylab=\"\", bg=\"white\")\nrect(-10, -10, 120, 120, col=\"white\")\nbox(lty = 3)\n#tercer gráfico\nplot(1:100, type=\"n\", axes=F, xlab = \"\", ylab=\"\", bg=\"white\")\nrect(-10, -10, 120, 120, col=\"white\")\nbox(lty = 3)\n```\n<p><br></p>\n\nComo vemos en este caso hemos modificado un poco el lienzo, ahora tenemos una fila continua en la parte superior y partida en la parte inferior, para lograr esta partición hemos incluido el argumento _byrow=T_ esto cambia la matriz haciendo que se llene por filas y no por columnas como sucede por defecto. Además hemos incluido el ancho y alto de cada fila y columna. Finalmente, en la función `par` pusimos el argumento _oma_ este argumento permite modificar los márgenes del grupo de gráficas. \n\n>Recuerden __*mar*__ modifica los márgenes de cada una de las gráficas y __*oma*__ el márgen del grupo de gráficas.\n\nModifica los márgenes del grupo de gráficas para que comprendas mejor lo que puede hacer este argumento. \n\n##Parámetros gráficos\n\nAunque no lo sabían, ya hemos utilizado algunos parámetros gráficos en la función `par`, estos nos han servido para manipular e lienzo. Usamos _mar_ para cambiar márgenes de las gráficas, _oma_ para el conjunto de gráficas, pero además, _bg_ para poner un color al fondo de la gráfica, y _mfcol_ para dividir el lienzo en varias partes iguales.\n\nVamos a ver unos pocos parámetros más que nos permiten modificar por ejemplo el tipo de símbolos que graficamos o las líneas, además de los tamaños de estas dos.\n\nCuando realizamos un plot según sean nuestros datos, éstos serán graficados como puntos o como líneas.  Podemos darle una forma, un tamaño y color a estos puntos. \n\n```{r, fig.cap=\"Tipos de símbolos gráficos desplegados\", fig.align='center', fig.height=4, fig.width=4}\nx <- rep(1:5, 5)\ny <- sort(rep(1:5, 5))\npar(mar=c(1,1,1,1))\nplot(x,y, pch=1:25, col=1:5, cex=seq(1,3,length.out = 25), bg=\"yellow\",\n     axes=FALSE, xlab=\"\", ylab=\"\", ylim=c(0,6))\ntext(x,y-0.3, cex=0.8)\n\n```\n<p><br></p>\n\nEntendamos lo que hemos hecho. Iremos por cada argumento utilizado, explicando cual es la función de cada uno de estos. *__pch__*: este argumento nos permite modificar el tipo de símbolo gráfico desplegado, cada número del 1 al 25 corresponde un tipo de símbolo (el símbolo y su número correspondiente se ve en el gráfico anterior). *__col__*: este argumento controla el color que tomará el símbolo, en nuestro ejemplo hemos escogido los números del 1 al 5 que corresponden a los colores; negro, rojo, verde, azul y cyan.  Podemos también describir el color que quiero poniendo el nombre en inglés, ej. \"black\".  Para ver los colores disponibles digite colors() en la consola y ejecútelo. *__cex__*: este argumento controla el tamaño de los símbolos, por defecto el tamaño es 1, podemos poner valores menores o superiores. En la figura generamos un vector entre 1 y 3 con 25 particiones, para que los símbolos se desplieguen con tamaños crecientes entre 1 y 3. *__bg__*: este argumento controla el fondo de los símbolos 21 a 25, podemos utilizar cualquier color. Más adelante conoceremos el resto de argumentos.\n\nTambién podemos dar formato a las líneas, modificando el tipo de línea y su tamaño. Veamos cómo podemos hacer esto.\n\n```{r, fig.cap=\"Tipos de líneas desplegadas en gráficos\", fig.align='center', fig.height=3, fig.width=4}\nlin <- matrix(c(rep(1,5), rep(2,5), rep(3,5), rep(4,5), rep(5,5)), 5,5) \npar(mar=c(1,1,1,1))\nmatplot(lin, type=\"l\", lty=1:5, lwd=seq(1,3,length.out = 5),\n        axes=FALSE, ylab=\"\")\n```\n<p><br></p>\n\nEn este caso el argumento *__type=\"l\"__*: define el tipo de gráfico en este caso le hemos dicho que se dibuje una línea (\"l\"), podemos graficar puntos (símbolos) (\"p\") o ambos \"b\" o podemos graficar líneas verticales a cada dato desde el eje central usando __type=\"h\"__. *__lwd__*: controla el tipo de línea, continua, entrecortada, puntos, puntos y líneas, etc. *__lwd__*: define el tamaño de la línea, por defecto es 1. Podemos poner un valor para todas o como en el ejemplo un valor para cada línea. \n\n\n##Anatomía de una gráfica\n\nComo hemos visto R es muy versátil y podemos hacer una gráfica combinada que nos presente información complementaria.  Ahora pasaremos del lienzo a la gráfica, pero antes de iniciar los gráficos es necesario conocer cuáles son las partes de una gráfica.\n\nUtilizaremos datos de R para hacer una gráfica y ver sus partes.\n\n```{r, fig.cap=\"Anatomía de un gráfico\", fig.align='center', fig.height=4, fig.width=5}\ndata(cars)\ntiff(filename = \"antomia.tiff\", width = 1600, height = 1300, \n     pointsize = 13, units = \"px\", res = 300)\npar(mar=c(4,3,3,4), mgp=c(1.5,0.4,0), tck=-0.02)\n\nplot(cars, xlab=\"Velocidad (mph)\", ylab = \"Distancia\", \n     main=\"Relación entre la velocidad de un vehículo\n     y la distancia de frenado\", cex=0.8, pch=19, cex.main=0.9, \n     cex.axis=0.7, cex.lab=0.85)\n\nmtext(\"Título\",side = 3,at = 2, font=2, line=1.3, cex=0.9, col=\"red\")\nmtext(\"Eje x\",side = 1,at = 27, font=2, line=0.4, cex=0.8, col=\"blue\")\nmtext(\"Etiqueta del eje x\",side = 1,at = 25, font=2, line=1.5, cex=0.8, col=\"red\")\nmtext(\"Eje y\",side = 1,at = 2, font=2, line=0.3, cex=0.8, col=\"blue\", las=2)\nmtext(\"Etiqueta del eje y\",side = 1,at = 0.5, font=2, line=-3.5, cex=0.8, col=\"red\", las=2)\ntext(10,80, \"Datos\", col=\"red\")\ndev.off()\n```\n<p><br></p>\n\n###Los ejes\n\nLos ejes definen el espacio o rango de una gráfica y lo más común es que una gráfica\ntenga dos ejes, los cuales denominamos X e Y. El eje X se ubica por convenio en la horizontal. En el eje x ponemos las variables independientes o explicativas, mientras que en el eje y colocamos las variables de respuesta.  En el caso del gráfico anterior la velocidad de frenado influye en la distancia de frenado de los vehículos.\n\nCada eje nos permite ver la variación de nuestros datos, vemos que la velocidad de los vehículos varía entre 3 y 25 mph (parece raro no!, los datos son de 1920), y la distancia de frenado esta entre 0 y 120 ...., _se dieron cuenta_ hemos encontrado un error en la etiqueta del gráfico, no sabemos la distancia en que esta medido.  Bueno se los cuento la distancia esta medida en pies. Como podemos ver en el gráfico R por defecto ajusta los ejes a los datos, siempre es bueno no tener espacio en blanco, sin embargo, usted podría querer marcar un límite de los ejes para hacer esto podemos utilizar el argumento __xlim__ o __ylim__ para modificar el eje x o y respectivamente.  Si quisiéramos incrementar el eje \"Y\" hasta 150 podríamos utilizar el argumento de la siguiente forma: __ylim=c(0,150)__.\n\n###Las etiquetas de los ejes\n\nComo nos dimos cuenta hace un momento tener unas etiquetas correctas es fundamental puesto que estas nos permiten comprender nuestros ejes.  !Cuidado¡ debemos pensarlas bien, ya que tampoco se vale tener unas etiquetas muy grandes.  Recuerda la información debe ser clara y concisa. La mayor parte de ocasiones las etiquetas de los ejes deben contener la unidad de medida en la cual se miden las variables.\n\n>Aprovecho para darte un consejo, siempre es mejor mantener los ejes con valores pequeños. Si tenemos unos datos en cientos de miles, es mejor representar los ejes en cientos y en la etiqueta poner el dato en miles.  Veamos un ejemplo: si tengo una etiqueta de \"número de células cancerígenas\" con unidades del eje entre 1000 y 100000, es mejor cambiar a una etiqueta \"Miles de células cancerígenas\" con unidades de entre 1 y 100.\n\n\n###El título\n\nEl título es una parte importante del gráfico, al igual que las etiquetas debemos intentar que el título sea corto y que rescate lo más importante de la gráfica.  Muchas veces se omite el título del gráfico cuando utilizamos una etiqueta de la figura.  Sin embargo, recuerde que si no tenemos la etiqueta debemos colocar un título. \n\n\n##Ejercicio 1\n\n\nBueno vamos a parar un poco y ver lo que otra gente ha hecho con gráficos.  Este ejercicio es sencillo y espero divertido.\n\nPiense en una temática específica que le interese, ahora va a buscar 6 gráficos de esa temática, 3 gráficos deben ser buenos gráficos y mire tres más que usted considere que no son buenos gráficos. Coloque los gráficos en una hoja de word y describa porque considera que los gráficos son buenos o malos.\n\n\n\n#Una gráfica con R\n\n------------\n\nVamos mostrar algunas de las funcionalidades de R para hacer gráficos y dar formato general. Vamos a trabajar con un gráfico bivariado para lo cual vamos a generar dos series de datos al azar. \n\nEl primer paso hacer el gráfico para esto usamos la función `plot` y agregamos las dos series de datos que queremos graficar.\n\n```{r, fig.cap=\"Uso de plot, el primer paso\", fig.align='center', fig.width=4, fig.height=4}\n\nset.seed(3)\nx <- rnorm(20)\ny <- rnorm(20) \n\n#Graficamos\nplot(x,y) \n```\n<p><br></p>\n\nComo vemos el gráfico por defecto no está del todo mal, ha generado unos ejes ajustados a los datos, ha dado unas etiquetas a cada eje y puesto que son datos de dos variables ha elegido puntos para representar los gráficos. Pero podríamos mejorar la presentación de este gráfico.  Por ahora no hemos hablado de los datos (lo más importante), sino que nos centraremos en el formato.\n\nRecuerde que hay algunos principios que deberíamos tenerlos presente. Lo primero es tener un título, y unas etiquetas explicativas para cada eje. Además vamos a cambiar a unos símbolos que llamen más la atención.\n\n```{r, fig.cap=\"Personalizando el grafico en R (1)\", fig.align='center', fig.width=4, fig.height=4}\nplot(x, y, xlab=\"números al azar\", ylab=\"números al azar\", pch=23, col=\"blue\", bg=\"green\", bty=\"l\", tcl=0.4, main=\"Relación entre números al azar\", las=1, \n     cex=1.3, cex.axis=0.8, cex.lab=0.9)\n```\n<p><br></p>\n\nParece que ha mejorado, pueden intentar cambiando el símbolo utilizado, seleccionen un símbolo en base de la figura de símbolos. Cambie el color, utilice `colors()` para ver que colores hay disponibles.\n\nQue argumentos hemos utilizado.  Con __xlab__ y __ylab__ podemos indicar a R lo que queremos que se escriba como etiqueta del eje x y el y respectivamente. El argumento __pch__ y __col__ ya los hemos explicado antes es para cambiar el símbolo y el color. El argumento __bty__ permite controlar el tipo de caja del área del gráfico, \"l\" dibuja el primer eje y el segundo eje, nos da como resultado una L, podría poner \"7\" y se grafican los ejes 3 y 4, \"c\" los ejes 1, 2 y 3. El argumento __tcl__ modifica las marcas de graduación del gráfico, por defecto es __-0.5__, nosotros hemos cambiado a __0.4__ y por eso se han dibujado dentro de la caja. El argumento __main__ indica el título. __las__ indica la orientación de los ejes, por defecto es \"las=0\" que indica que el eje x se escribe horizontalmente y el eje y se escribe verticalmente. Podemos cambiar a \"las=1\" la opción que elegimos para que el eje \"x\" y \"y\" se escriban horizontalmente. Finalmente, \"las=2\" me permite poner el eje x verticalmente y el eje y horizontalmente. Como vimos antes el argumento __cex__ permite controlar el tamaño en general, en este caso cex solo controla el tamaño del símbolo, \"cex.axis\" y \"cex.lab\" controla el tamaño del eje y el tamaño de la etiqueta del eje.  Podemos utilizar \"cex.main\" para controlar el tamaño del título.\n\nHemos mejorado pero aún me gustaría modificar algunas otras cosas como el fondo del lienzo, la distancia a la que se escriben el título y las etiquetas de los ejes. Vamos a ver cómo cambiar este formato.\n\n```{r, fig.cap=\"Personalizando el grafico en R (2)\", fig.align='center', fig.width=4, fig.height=4}\n\npar(bg=\"wheat4\", mar=c(2.5, 2.5,3, 0.25))#cambiamos el fondo y los márgenes\n\nplot(x, y, type=\"n\", xlab=\"\", ylab=\"\", xlim=c(-2, 2), \n     ylim=c(-2, 2), xaxt=\"n\", yaxt=\"n\") #ejecutamos el plot con type=\"n\",\n                                        #se desplega unicamente la caja (box)\nrect(-3, -3, 3, 3, col=\"wheat\") #una caja con de otro color\npoints(x, y, pch=19, col=rgb(1,0,0,0.6), cex=1.5) #agregamos los puntos\naxis(side=1, c(-2,-1,0,1,2), tcl=-0.4, \n     labels=FALSE, col=\"white\", lwd=2) #agregamos el primer eje, de color blanco\naxis(side=2, -2:2, tcl=-0.4, labels=FALSE, col=\"white\", lwd=2) \ntitle(\"Relación entre números al azar\", font.main=4, adj=1, \n      cex.main=1.2, line=1.8, col.main=\"darkred\") #Agregamos el título\nmtext(\"números al azar\", side=1, line=1, at=1.5, \n      cex=0.9, font=3, col=\"white\")#Agregamos etiqueta del eje 1\nmtext(\"números al azar\", line=0.5, at=-1.8, \n      cex=0.9, font=3, col=\"white\")#Agregamos etiqueta del eje 2 \nmtext(-2:2, side=1, las=1, at=-2:2, line=0.3, \n      col=\"white\", cex=0.9, font=2) #Incluimos las leyendas del eje 1\nmtext(-2:2, side=2, las=1, at=-2:2, line=0.5,\n      col=\"white\", cex=0.9, font=2) #Incluimos las leyendas del eje 2\n\n```\n<p><br></p>\n\nIntentaré explicar rápidamente lo que hemos hecho. \n- Lo primero es que graficamos con argumentos de tipo (type) y ejes (xaxt, yaxt) nulo (\"n\"), por lo que no se dibujan ni ejes ni puntos. Además, las etiquetas de los ejes sin datos (xlab=\"\", ylab=\"\") por lo que R no escribe etiquetas.\n\n- Con la función `rect` graficamos un cuadrado mayor al límite del gráfico de -3 a 3 y le ponemos un color distinto al fondo.\n\n- Con la función `points` agregamos los datos con unos símbolos determinados y les ponemos un color. Usamos la función `rgb` que nos permite dar un color y hacerlo semitransparente.\n\n- Con la función `axis` incluimos el eje 1 y 2 (side=1 o 2), le damos un vector que usará para poner las marcas, el tamaño de las marcas lo controlamos con tcl (tcl=-0.4). Le damos color (col), le decimos que no incluya las leyendas (labels=FALSE) y controlamos el ancho de la línea del eje (lwd=2).\n\n- Con la función `title` podemos incluir el título y controlar algunos parámetros. El argumento \"font.main\" permite modificar el texto con cursivas y negritas como en el gráfico (font.main=4), cursivas (font.main=2), negritas (font.main=2)  o sin cursivas y sin negritas (font.main=4). El argumento adj=1 justifica el texto a la derecha, podemos cambiarlo al centro con adj=0.5, o a la izquierda con adj=0. El argumento line=1.8 permite alejar o acercar el título del gráfico.\n\n\nMe parece que quedo muy bien el gráfico que opinan ustedes?.  Lo podrían hacer mejor, estoy seguro de que si, inténtalo. \n\n##Ejercicio 2\n\nModifica los argumentos de esta gráfica, cambia los colores los símbolos y todo lo que quieras. Intenta hacer un gráfico que se acople a lo que necesitas y te gusta.\n\n\n#Gráficos de una variable\n\nBueno creo que hemos logrado hacer cosas interesantes pero solo hemos jugado, como les decía lo más importante en un gráfico son los datos.  Hasta ahora no nos habíamos preocupado de ello, pero es hora de hacerlo.\n\n```{r}\nlibrary(readxl)\name <- read_excel(\"AMEBIASIS_LOJA.xlsx\",sheet = 1, na = \"NA\")#cargamos los datos\npr.edad <- tapply(ame$`Edad en años`, ame$Parroquia, mean)\n                                      # obtenemos la media de edad por parroquia \n```\n\nUna vez que tenemos los datos de la media de edad con amebiasis es posible que nos interese ver los datos en una gráfica.\n\n```{r , fig.cap=\"Ejemplo de gráfico con una sola variable\", fig.align='center', fig.width=4, fig.height=4}\nplot(pr.edad, ylab=\"Edad Promedio\", xaxt=\"n\", xlab=\"\", pch=19)\n```\n<p><br></p>\n\nLe hemos pedido que no grafique el eje x, ya que realmente el eje x no es ninguna variable, lo que estamos graficando es una sola variable, por lo que lo lógico es que este eje no se grafique. Esta gráfica nos permite ver la dispersión de los datos, ya podemos ver que la edad más recurrente en la que se enferman de amebiasis es entre 20 y 30 años. Sin embargo, una gráfica mejor para resumir una sola variable cuantitativa como la media de edad sería un diagrama de caja, también conocido como diagrama de caja y bigote, o boxplot en inglés. \n\n\n```{r, fig.cap=\"Ejemplo de boxplot con una sola variable (1)\", fig.align='center', fig.width=4, fig.height=4}\nboxplot(pr.edad)\n```\n<p><br></p>\n\nAhora es mucho más claro que la mediana de nuestros datos están en torno a los 30 años. Además vemos que algunas parroquias muestran valores raros superiores a los 50 años. Una buena forma de presentar esta información es mezclar este boxplot con los datos brutos.  Veamos lo que podemos hacer.\n\n```{r, fig.cap=\"Ejemplo de boxplot con una sola variable (1)\", fig.align='center', fig.width=4, fig.height=4}\nboxplot(pr.edad)\nstripchart(pr.edad, method = \"jitter\", jitter = 0.1, add =\nTRUE, vertical = TRUE, pch=19)\n```\n<p><br></p>\n\nBueno que les parece, ¿bonito no?  Aunque hay muchos elementos que incluir aún para que esto pueda llamarse gráfico de verdad.\n\nOtra interesante opción es realizar un histograma con esta variable. El histograma nos muestra la frecuencia de los datos a lo largo de rangos equitativos de la variable.  Al igual que el boxplot nos ayuda ver la distribución de los datos.   \n\n```{r, fig.cap=\"Ejemplo de histograma\", fig.align='center', fig.width=4, fig.height=4}\n\nhist(pr.edad)\n\n```\n<p><br></p>\n\n\n\n##Ejercicio 3\n\nNos interesa describir la distribución de edad de las personas que han padecido Amebiasis. \n\nIncluya los elementos que considere necesarios y póngale el formato de color y ejes que le parezca al boxplot y al histograma del promedio de edad por parroquia de las personas con amebiasis. Debe partir el lienzo en dos partes, podrían ser desiguales para poner en el mismo lienzo las dos gráficas. Espero tener un gráfico para enmarcar, seguro lo podrá hacer.\n\n",
    "created" : 1477688811510.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3229986849",
    "id" : "9643902D",
    "lastKnownWriteTime" : 1501103109,
    "last_content_update" : 1501103109451,
    "path" : "~/GitHub/Graficando/index.Rmd",
    "project_path" : "index.Rmd",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}